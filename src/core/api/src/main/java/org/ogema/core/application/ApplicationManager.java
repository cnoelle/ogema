/**
 * Copyright 2011-2018 Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ogema.core.application;

import java.io.File;
import java.io.Serializable;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

import org.ogema.core.administration.AdministrationManager;
import org.ogema.core.channelmanager.ChannelAccess;
import org.ogema.core.hardwaremanager.HardwareManager;
import org.ogema.core.installationmanager.InstallationManagement;
import org.ogema.core.logging.OgemaLogger;
import org.ogema.core.resourcemanager.ResourceAccess;
import org.ogema.core.resourcemanager.ResourceManagement;
import org.ogema.core.resourcemanager.pattern.ResourcePatternAccess;
import org.ogema.core.security.WebAccessManager;
import org.ogema.core.tools.SerializationManager;

/** This interface is the single point of entry for applications and resource drivers */
public interface ApplicationManager extends Serializable {
	/**
	 * Find and demand resources.
	 * 
	 * @return reference to ResourceAccess (low level version)
	 */
	ResourceAccess getResourceAccess();

	/**
	 * Declare and get detailed data access of application.
	 * 
	 * @return reference to ResourcePatternAccess allowing to declare and obtain application data access in detail
	 */
	ResourcePatternAccess getResourcePatternAccess();

	/**
	 * Create and manage resources.
	 * 
	 * @return reference to ResourceManagement
	 */
	ResourceManagement getResourceManagement();

	/**
	 * Install / Deinstall applications (relevant only for administration and marketplace applications).
	 * 
	 * @return reference to InstallationManagement
	 */
	InstallationManagement getInstallationManagement();

	/**
	 * Access framework administration API
	 * 
	 * @return reference to AdministrationManager
	 * @throws SecurityException if the caller does not have
	 * 		org.ogema.accesscontrol.AdminPermission("*" "app")
	 */
	AdministrationManager getAdministrationManager();

	/**
	 * Get access to low-level hardware drivers.
	 * 
	 * @return reference to ChannelAccess
	 */
	ChannelAccess getChannelAccess();

	/** Get access to hardware interfaces.
	 * @return a HardwareManager instance
	 */
	HardwareManager getHardwareManager();

	/**
	 * Gets the WebAccessManager, allowing an application to register web resources such as web pages and to authenticate users.
	 * 
	 * @return Reference to the framework's WebAccessManager.
	 */
	WebAccessManager getWebAccessManager();

	/**
	 * Get a logger with default name.
	 * @return an application specific logger instance
	 */
	OgemaLogger getLogger();

	/**
	 * Create and start a timer.
	 * 
	 * @param millis
	 *            time in ms between two callbacks performed by the timer, must be {@code > 0}
	 * @param listener
	 *            reference to object implementing the callback for the timer
	 * @return reference to Timer that will perform callbacks to listener
	 * @throws IllegalArgumentException if {@code millis < 1}
	 */
	Timer createTimer(long millis, TimerListener listener);

	/**
	 * Create and start a timer.
	 * 
	 * @param millis
	 *            time in ms between two callbacks performed by the timer, must be {@code > 0}
	 * @return reference to {@link Timer} where one or multiple {@link TimerListener}s can be added.
	 * @throws IllegalArgumentException if {@code millis < 1}
	 */
	Timer createTimer(long millis);

	/**
	 * Destroys a previously-created timer. This is an equivalent alternative to {@link Timer#destroy()}.
	 * @param timer Timer to destroy.
	 */
	void destroyTimer(Timer timer);

	/**
	 * Submit event that will result into a callback to the application. This method can be used by methods that are
	 * called asynchronously to the callbacks generated by the event broker in order to trigger the call of a method
	 * synchronized by the event broker.
	 * 
	 * @param <T> return type of the callable
	 * @param application
	 *            reference to application class implementing the Java Callable interface
	 * @return Returns the future on the event. May return null if the event has been rejected for some reason.
	 */
	<T> Future<T> submitEvent(Callable<T> application);

	/**
	 * Stop the application and shut down this application manager. When called
	 * on the application thread, this will call {@link Application#stop(org.ogema.core.application.Application.AppStopReason)}
	 * directly, otherwise the stop method will be called on the application thread
	 * and the calling thread will block until the stop call returns.
	 */
	void shutdown();

	/**
	 * Get operation time of OGEMA framework. Usually this is the system time of the gateway computer, but might by
	 * changed by the framework implementation/administrator for simulation and testing
	 * 
	 * @return time in ms since epoch
	 */
	long getFrameworkTime();

	/**
	 * Activate listening to exceptions. Framework exceptions are reported to all registered listeners. If an application does not register as ExceptionListener, it
	 * will not be informed about framework-internal exceptions.
	 * 
	 * @param listener
	 *            reference to object implementing the callbacks for the exceptions.
	 */
	void addExceptionListener(ExceptionListener listener);

	/**
	 * Report an exception to the exception listeners registered on this.
	 * @param exception the exception to be handled by the listeners. The exception is sent to all of the listeners.
	 */
	void reportException(Throwable exception);

	/**
	 * Gets an instance of a SerializationManager with default parameters for serialization (see
	 * {@link SerializationManager} for default configuration).
	 * @return an application specific SerializationManager instance (every call to this method creates a new instance)
	 */
	SerializationManager getSerializationManager();

	/**
	 * Gets a custom-configured instance of a SerializationManager.
	 * 
	 * @param maxDepth 
	 *            Defines the maximum recursion depth for parsing sub-resources. Sub-resources with a depth larger
	 *            than the maximum are serialized as resource links instead of normal resources (which effectively
	 *            ends going deeper into the sub-resources).
	 * @param followReferences
	 *            If true, references are treated as sub-resources. If false, references are only listed as links.
	 * @param writeSchedules
	 *            If true, sub-resource schedules are serialized. If false, they are only serialized as links.
	 * @return Returns a SerializationManager object configured according to the parameters.
	 */
	SerializationManager getSerializationManager(int maxDepth, boolean followReferences, boolean writeSchedules);

	/**
	 * Get an AppID instance that encapsulates the generation of the appID-String of the application.
	 * 
	 * @return
	 */
	AppID getAppID();

	/**
	 * Get a File object in the default OSGi bundle-storage location of the application. The application does not need 
	 * a special permission to read, write, create and delete files in this location, but the available disk space 
	 * may be limited by the framework. A {@code File} object for the base directory of the persistent storage
	 * area can be obtained by calling this method with an empty string. <br>
	 * 
	 * This method is equivalent to BundleContext#getDataFile(String) of the underlying OSGi-framework.
	 * 
	 * @param filename
	 * 			Filename relative to the bundle-storage location
	 * @return
	 * 			A {@code File} object that represents the requested file or
	 *         {@code null} if the platform does not have file system support.
	 */
	File getDataFile(String filename);
}
