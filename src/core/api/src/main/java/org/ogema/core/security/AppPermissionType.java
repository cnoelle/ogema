/**
 * Copyright 2011-2018 Fraunhofer-Gesellschaft zur Förderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ogema.core.security;

import org.osgi.service.condpermadmin.ConditionInfo;
import org.osgi.service.condpermadmin.ConditionalPermissionInfo;

/**
 * A rich permission type contains information for the administrator/user helping to decide whether an application shall
 * be installed. The standard Java permission (see
 * http://docs.oracle.com/javase/1.4.2/docs/guide/security/permissions.html) shall be provided as rich permissions by
 * the framework.<br>
 * A permission type represents a Java permission (e.g. permission to read from file system) or an OGEMA permission, but
 * does not specify a specific location on the file system or specific resource / resource type. If the installation
 * manager recognizes a permission requested not specified by an AppPermissionType, the permission must be rated as
 * administrativeLevelOnly (highest risk).
 */
public interface AppPermissionType {

	/**
	 * Get declaration string of the permission. The declaration is a string as described in section 50.7 of
	 * "OSGi Service Platform Core Specification Release 4, version 4.3"
	 * 
	 * Example: ALLOW { [org.osgi.service.condpermadmin.BundleLocationCondition "file:./apps/myTrustedApps/*"]
	 * (org.ogema.accesscontrol.ResourcePermission "type=org.ogema.model.hvac.HeatPump" "READ") }
	 * "autogeneratedUniqueName"
	 * 
	 * This example allows all Apps their location path starts with "file:./apps/myTrustedApps" a read access to ogema
	 * resources from type "org.ogema.model.hvac.HeatPump".
	 * 
	 * @return declaration string which contains all individual permissions with their associated filter and action
	 *         strings and all conditions that are to be fulfilled so that the permissions become effective.
	 */
	public String getDeclarationString();

	/**
	 * Get an object which contains all the relevant information that build this AppPermissionType. See
	 * {@link AppPermissionType#getDeclarationString() }. These information can be individually obtained from the returned
	 * object.
	 * 
	 * @return ConditionalPermissionInfo object which contains all individual permissions with their associated filter
	 *         and action strings and all conditions that are to be fulfilled so that the permissions become effective.
	 */
	public ConditionalPermissionInfo getDeclarationInfo();

	/**
	 * Get the mode of this AppPermissionType. This can be true or false where true means that all the encoded
	 * permissions in this type are allowed and false means that they are denied.
	 * 
	 * @return true if the policy is from type "ALLOW" or false if it is from type "DENY". See
	 *         {@link AppPermissionType#getDeclarationString() }.
	 */
	public boolean getPermissionMode();

	/**
	 * Get the unique name of this type. Each AppPermissionType has an unique id as name string.
	 * 
	 * @return The unique name of the type
	 */
	public String getName();

	/* TODO: language parameter? */
	/**
	 * Get description of the permission type risk when granted.
	 * 
	 * @param language
	 * @return text that may contain HTML tags
	 */
	public String getRiskDescription(String language);

	/**
	 * Add a new ConditionInfo object linked to this Permission type. In case of Java/OSGi Permission the policies to be
	 * installed must be extended at least by a condition info which helps to identify the App, e.g.
	 * [org.osgi.service.condpermadmin.BundleLocationCondition \"file:/path/to/bundle/file\"]. Additional conditions can
	 * be optionally added which have to be satisfied that the permission can be granted.
	 * 
	 * @param info
	 *            the info
	 */
	public void addCondition(ConditionInfo info);

	/**
	 * The Enum AdminAction. The values are used to create AdminPermissions with a particular action to be added to the
	 * AppPermission as part of an AppPermissionType.
	 */
	public enum AdminAction {

		/**
		 * APP: Installing apps, , restricting their rights (a subset of the installer’s rights), and uninstalling them.
		 * The installing user of an app shall be stored in the appropriate management instance. The filter string
		 * contains the owner, which is the name of the installing user.
		 */
		APP,
		/**
		 * USER: Installing users, restricting their rights (a subset of the installer’s rights), and uninstalling them.
		 * Users are held in a plain structure. The creator is not stored.
		 */
		USER,
		/** SYSTEM: Configuring the system settings (e.g. logger settings). */
		SYSTEM
	}

	/**
	 * The Enum ChannelAction.
	 */
	public enum ChannelAction {

		/** Read the channel. */
		READ,
		/** Write the channel. */
		WRITE
	}

	/**
	 * The Enum ResourceAction.
	 */
	public enum ResourceAction {

		/** READ: Read a resource. */
		READ,

		/** WRITE: Write a resource. */
		WRITE,
		/** CREATE: Create a resource in a path with a type ("*" Operator possible). */
		CREATE,
		/** ADD_SUB: add a sub resource to a resource (Checked in Resource, path is "", counters updated). */
		ADD_SUB,
		/** DELETE: Delete a resource. */
		DELETE
	}
}
