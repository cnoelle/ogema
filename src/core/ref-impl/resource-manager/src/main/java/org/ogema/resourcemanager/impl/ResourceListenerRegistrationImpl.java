/**
 * Copyright 2011-2018 Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ogema.resourcemanager.impl;

import java.lang.ref.WeakReference;
import java.util.concurrent.Callable;
import org.ogema.core.administration.AdminApplication;
import org.ogema.core.application.ApplicationManager;

import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.ResourceValueListener;
import org.ogema.resourcetree.TreeElement;
import org.ogema.resourcetree.listeners.InternalValueChangedListenerRegistration;

/**
 * Represents a listener registration generated by a call to
 * {@link Resource#addResourceListener(org.ogema.core.resourcemanager.ResourceListener, boolean)}. The same
 * ResourceListenerRegistration object will be used in the {@link ElementInfo} of all affected Resources, ie. all sub
 * Resources of the Resource on which the listener was registered.
 * 
 * @author jlapp
 */
@SuppressWarnings("deprecation")
public class ResourceListenerRegistrationImpl extends InternalValueChangedListenerRegistration implements ResourceListenerRegistration {

	protected final ResourceBase origin;
	protected final WeakReference<org.ogema.core.resourcemanager.ResourceListener> listener;
	protected final boolean recursive;

	public ResourceListenerRegistrationImpl(ResourceBase origin, org.ogema.core.resourcemanager.ResourceListener listener, boolean recursive) {
		this.origin = origin;
		this.listener = new WeakReference<>(listener);
		this.recursive = recursive;
	}

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof ResourceListenerRegistrationImpl)) {
			return false;
		}
		ResourceListenerRegistrationImpl other = (ResourceListenerRegistrationImpl) obj;
		return other.listener.get() == listener.get() && other.origin.equals(origin);
	}

	@Override
	public int hashCode() {
		return origin.hashCode();
	}

	@Override
	public void queueResourceChangedEvent(final Resource r, boolean valueChanged) {
		Resource originPathResource = null;
		if (r.equalsLocation(origin)) {
			originPathResource = origin;
		}
		else { //resource needs to be 'translated' to be relative to origin.
			String topLevelOrigin = origin.getPath("/").split("/", 2)[0];
			if (!r.getPath("/").startsWith(topLevelOrigin)) {
				for (Resource sub : origin.getSubResources(r.getResourceType(), true)) {
					if (sub.equalsLocation(r)) {
						originPathResource = sub;
						break;
					}
				}
				if (originPathResource == null) { //event source no longer reachable
					return;
				}
			}
		}
		final Resource changedResource = originPathResource != null ? originPathResource : r;

		Callable<Void> listenerCall = new Callable<Void>() {

			@Override
			public Void call() throws Exception {
				org.ogema.core.resourcemanager.ResourceListener l = listener.get();
				if (l != null) {
					l.resourceChanged(changedResource);
				}
				return null;
			}
		};
		origin.resMan.getApplicationManager().submitEvent(listenerCall);
	}

	@Override
	public void performRegistration() {
		final ResourceDBManager manager = origin.resMan.getDatabaseManager();
		if (recursive) {
			for (TreeElement el : manager.collectSubTreeElements(origin.getEl())) {
				ElementInfo info = manager.getElementInfo(el);
				info.addResourceListener(this);
			}
		}
		else {
			ElementInfo info = manager.getElementInfo(origin.getEl());
			info.addResourceListener(this);
		}
	}

	@Override
	public void unregister() {
		final ResourceDBManager manager = origin.resMan.getDatabaseManager();
		ElementInfo info = manager.getElementInfo(origin.getEl());
		ResourceListenerRegistration reg = (ResourceListenerRegistration) info.removeResourceListener(this);
		if (reg != null && reg.isRecursive()) {
			for (TreeElement el : manager.collectSubTreeElements(origin.getEl())) {
				info = manager.getElementInfo(el);
				info.removeResourceListener(this);
			}
		}
	}

	@Override
	public Resource getResource() {
		return origin;
	}

	@Override
	public AdminApplication getApplication() {
		ApplicationManager appman = origin.resMan.getApplicationManager();
		return appman.getAdministrationManager().getAppById(appman.getAppID().getIDString());
	}

	@Override
	public org.ogema.core.resourcemanager.ResourceListener getListener() {
		return listener.get();
	}

	@Override
	public boolean isRecursive() {
		return recursive;
	}

	@Override
	public boolean isAbandoned() {
		return listener.get() == null;
	}

	@Override
	public <T extends Resource> ResourceValueListener<T> getValueListener() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isCallOnEveryUpdate() {
		// TODO Auto-generated method stub
		return false;
	}

}
