/**
 * Copyright 2011-2018 Fraunhofer-Gesellschaft zur FÃ¶rderung der angewandten Wissenschaften e.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ogema.resourcemanager.impl;

import java.util.concurrent.Callable;
import org.ogema.core.administration.AdminApplication;
import org.ogema.core.application.ApplicationManager;

import org.ogema.core.model.Resource;
import org.ogema.core.resourcemanager.ResourceValueListener;
import org.ogema.resourcetree.listeners.InternalValueChangedListenerRegistration;

/**
 * Represents a listener registration generated by a call to
 * {@link Resource#addValueListener(org.ogema.core.resourcemanager.ResourceValueListener) }.
 * 
 * @author jlapp
 */
public class ValueListenerRegistration extends InternalValueChangedListenerRegistration {

	protected final ResourceBase origin;
	@SuppressWarnings("rawtypes")
	protected final ResourceValueListener listener;
	protected final boolean callOnEveryUpdate;

	public ValueListenerRegistration(ResourceBase origin, ResourceValueListener<?> listener, boolean callOnEveryUpdate) {
		this.origin = origin;
		this.listener = listener;
		this.callOnEveryUpdate = callOnEveryUpdate;
	}

	@Override
	public void queueResourceChangedEvent(final Resource r, boolean valueChanged) {
		if (!callOnEveryUpdate && !valueChanged) {
			return;
		}
		Callable<Void> listenerCall = new Callable<Void>() {

			@Override
			@SuppressWarnings("unchecked")
			public Void call() throws Exception {
				if (isActive())
					listener.resourceChanged(getResource()); //always call on registration resource
				return null;
			}
		};
		origin.resMan.getApplicationManager().submitEvent(listenerCall);
	}

	@Override
	public Resource getResource() {
		return origin;
	}

	@Override
	public AdminApplication getApplication() {
		ApplicationManager appman = origin.resMan.getApplicationManager();
		return appman.getAdministrationManager().getAppById(appman.getAppID().getIDString());
	}

	@Override
	public boolean isCallOnEveryUpdate() {
		return callOnEveryUpdate;
	}

	@Override
	@SuppressWarnings("unchecked")
	public <T extends Resource> ResourceValueListener<T> getValueListener() {
		return listener;
	}

}
